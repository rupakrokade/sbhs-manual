\chapter{Using Single Board Heater System, Virtually!}
\section{Introduction to Virtual Labs at \\IIT Bombay}
The concept of virtual laboratory is a brilliant step towards strengthening the education system of an university/college, a metropolitan area or even an entire nation. The idea is to use the ICT i.e. Information and Communications Technology, mainly the Internet for imparting education or exchange of educational information. Virtual Laboratory mainly focuses on providing the laboratory facility, virtually. Various experimental set-ups are hooked up to the internet and made available to use for the external world. Hence, anybody can connect to that equipment over the internet and carry out various experiments pertaining to it. The beauty of this idea is that a college who cannot afford to have some experimental equipments can still provide laboratory support to their students through virtual lab, and all that will cost it is a fair Internet connection! Moreover, the laboratory work does not ends with the college hours, one can always use the virtual lab at any time and at any place assuming the availability of an internet connection. 

A virtual laboratory for SBHS is launched at IIT Bombay. Here is the url to access it: {\bf vlabs.iitb.ac.in/sbhs/}. A set of 36 SBHS are made available to use over the internet 24$\times$ 7. These individual kits are made available to the users on hourly basis. We have a slot booking mechanism to achieve this. Since there are 36 SBHS connected with an hours slot for 24 hrs a day, we have 864 one hour slots a day. This means that 864 individual users can access the SBHS in a day for an hour. This also means that up to 6048 users can use the SBHS for an hour in a week and 181440 in a month! A web page is hosted which is the first interface to the user. The user registers/logs in himself/herself here. The user is also supposed to book a slot for accessing the SBHS. A database server maintains a record of the data generated through the web interface. A python script is hosted on the server side and it helps in connecting the user with the corresponding SBHS placed remotely. A free and open source scientific computing Software, Scilab, is used by the user for implementing the experiment on SBHS, in terms of simple Scilab coding. 

\section{Evolution of SBHS virtual labs}
In \cite{vlabs-kmm}, 
the control algorithm is implemented at the server end and the remote
student just keys in the parameters, as shown in Figure
\ref{fig:initial}. 
\begin{figure}
\includegraphics[width=\linewidth]{IEEE-Chile/figures/vlab-1.png}
\caption{SBHS virtual laboratory with remote access using LabVIEW}
\label{fig:initial}
\end{figure}
LabVIEW was used for the implementation of the same. The
server end consisted of a computer connected with an SBHS with a full
blown copy of LabVIEW installed on it. The client has a LabVIEW run
time engine available for free download from the National Instruments
website.  A few
LabVIEW algorithms/experiments were hosted on the server. The client
accesses these algorithm/experiment over the Internet using a web
browser by entering appropriate parameters.

It was realized that the learning experience is not complete for this
structure. This is because the server hosts some pre-built LabVIEW
algorithms and a user can only access these few algorithms. The user
can in no way change the program and can only input experimental
parameters. 
Hence, we came up with a new architecture
as shown in the Figure \ref{fig:second} that used full blown copies of
LabVIEW at both server and client ends.  
\begin{figure}
\includegraphics[width=\linewidth]{IEEE-Chile/figures/vlab-2.png}
\caption{SBHS virtual laboratory with remote access and live data sharing using LabVIEW}
\label{fig:second}
\end{figure}
 
 This idea uses the DataSocket technology of LabVIEW. Since now the
 client is having a complete LabVIEW installation on his/her computer
 she can now implement her own algorithms.  Thus this architecture did
 provide a complete learning experience to the students.  There are
 some shortcomings as well:

\begin{itemize}
\item LabVIEW is expensive and students may not be able to afford to
  buy it.  It is also prohibitively expensive for the Government to
  distribute it.

\item We used the LabVIEW version 8.04, which had restricted scripting
  language.  It was tedious to create new control algorithms in it.
\end{itemize}
\begin{figure}
\includegraphics[width=\linewidth]{IEEE-Chile/figures/vlab-3.png}
\caption{SBHS virtual laboratory using open source software}
\label{fig:third}
\end{figure}
This made us shift to free and open source (FOSS) software. We
replaced LabVIEW with Java and Scilab as shown in Figure
\ref{fig:third}. Scilab at the server end is used for communicating
with SBHS. Scilab at the client end is used for implementing the
algorithms. Java is used at both the server as well as client end for
communication over the Internet thereby connecting the client with the
server. 

For the above solution, we need a dedicated copy of scilab running at
the server end for every SBHS. One way to do this is to host it on
multiple computers with unique IPs. Hence the number of SBHS we want
to host requires as many computer's and public IPs thereby making
it expensive. Moreover, it also limits its scalability. The other way
to do this is to host multiple java and scilab servers on the same
computer.  Hosting many copies of Scilab simultaneously requires a
powerful computer for the server.

For these reasons  we decided to take scilab off the server computer
and to use java alone to communicate with the SBHS directly.  Java
also 
communicates with the client computer.  We connected seven SBHS
systems to a USB port through a serial port hub.  This architecture
was 
implemented on a Windows Operating System.  We faced the following
difficulties in this solution.
\begin{itemize}
\item When we connected more than one serial hub to a PC, the port ID
  could not be retrieved correctly.  Port ID information is required
  if we want a student to use the same SBHS for all their experiments
  during different sessions.
\item The experiments required time stamping of the data communicated
  to and from the server. But this time stamping was not linear and
  suffered instability.  
\end{itemize}
This made us to completely switch to FOSS with Ubuntu Linux as the OS
and is the current structure of the Virtual lab as shown in Figure
\ref{fig:detail-arch} 

\begin{figure}
\centering
\includegraphics[width=\linewidth]{IEEE-Chile/figures/vlab-arch}
\caption{Virtual control lab hardware architecture}
\label{fig:hw-arch}
\end{figure}

\section{Current Hardware Architecture}
The current hardware architecture of the virtual single-board heater system lab involves 36 single-board heater systems connected to the server via multiple 7 and 10-port USB hubs. The server computer is connected to a high speed internetwork and has enough processing capability to host data acquisition, database, and web servers. 
It has been successfully tested for the undergraduate Process Control course and the graduate Digital Control and Embedded systems courses conducted at IIT Bombay as well as few workshops over the internet. Currently, this architecture is integrated with a cameras on each SBHS to facilitate live video streaming. This gives the user a feel of remote hands-on. 

\section{Current Software Architecture} \label{sec:vlabarchi}
The current software architecture of this virtual SBHS control lab is shown in Figure \ref{fig:detail-arch}. The server computer runs Ubuntu Linux 12.04.2 OS. It hosts a Apache-MySQL server. The SBHS server is based on Python-Django framework and is linked to Apache server using Apache's WSGI module. The MySQL database server has the details of all the registered users, their slot details, authentication keys to allow remote access, etc. As shown in Figure \ref{fig:sbhs-website}, the Python-Django server has pages for registration, login, slot booking etc. \cite{vl010}.  On the client end, control algorithms are running in Scilab and a python based client application communicates with virtual labs server over the Internet.



\begin{figure}
\includegraphics[width=\linewidth]{IEEE-Chile/figures/webpage}
\caption{Home page of SBHS V Labs}
\label{fig:sbhs-website}
\end{figure}
The steps to be performed before and during each experiment are explained next.

\begin{figure}
\centering
\includegraphics[width=\linewidth]{IEEE-Chile/figures/new-server-arch.pdf}
\caption{Current Architecture of SBHS Virtual Labs}
\label{fig:detail-arch}
\end{figure}

\section{Conducting experiments using the Virtual lab}\label{vlabsexpt}
In this section we will see the steps involved in conducting experiments using virtual lab.

This section assumes that the necessary files and software are available on the users computer. Files can be downloaded from the website {\bf sbhs.os-hardware.in/downloads} as shown in fig \ref{fig:sbhs-website}
\begin{enumerate}
\item The user goes to the vlabs home page and if he is a first time visitor, he registers himself and follows the information provided there, else he directly logs in.
\item After logging in, the user will book a slot.
\item In the experiment folder the settings.txt file will be edited as per requirement. The client should take care not to make any unneccesary changes to this file. The example settings are anyways given in the end of this file.

\item The user will now start the python client. On windows OS, double clicking on the run.bat file will open the command prompt. On linux OS, one has to first go to the directory where the experiment files (.sce and .py) are kept. This can be done by typing {\tt cd<space>directory name} on the terminal. Linux users should also bypass the terminal proxy settings, if any, by executing the command {\tt export http proxy=’’} on the terminal. Be informed that this is just a temporay disable of terminal proxy and it should be done everytime you open a fresh terminal. Linux user should now type the command {\tt python sbhsclient.py} on the linux  terminal. 
\item The python client will first do some network checks. If it finds the network to be NOT ok for experimentation, it will put the message "No network connection".Else, if it finds the network to be ok for experimentation, it will communicate with the server and will authenticate the user if he is authorised to access the particular SBHS at the booked time. If the user is not authorised it he/she will get the message "Authentication failed. Please check your username and password". If the user is authenticate but has not booked the slot, he/she will get the message "No valid slot found. Please book a slot before starting the experiment". Also if the settings.txt file is not properly configured, it will give error {\tt Invalid settings in the "setttings.txt" file}. If every thing is fine, the client will get the "Login Successfull message." It will also display the log file name and the time left for experimentation.
\item The user now launches scilab, changes the directory to the folder where the necessary .sce, .sci and .xcos files of an experiment of interest resides. The user will execute the scilab code (.sce file) pertaining to the experiment. If the network connection is fine, it will automatically open the corresponding .xcos file. Else it will output a message on the scilab console {\tt No network connection}.
\item The user will run the xcos file. It will open a plot of the various experimental parameters. This process will continue until the experiment is stopped or the simulation time is lapsed. The simulation time can be changed by changing the {\tt final integration time} parameter available in the {\tt set up} option in the {\tt simulation} menu on the Xcos window.

\item The slot is made to last for 55 minutes. The last 5 minutes of the slot are used to reset the SBHS so that the next user will get the SBHS at a normal operating condition. The python client ceases connection automatically as soon as 55 minutes are over. Please note that there will be no pop up warning and the experiment will be stoped automatically.
\item A log of the experimental data with time stamp is maintained on the client side. It is also available to download using the "Download" link once you login on the sbhs vlabs website.
\end{enumerate} 

